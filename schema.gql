interface SearchResultItem {
  id: ID!
  content: String!
}

type Task implements SearchResultItem {
  createdAt: String!
  approachCount: Int!
  author: User!
  approachList: [Approach!]!
  tags: [String!]!
}

enum ApproachDetailCategory {
  NOTE
  EXPLANATION
  WARNING
}

type ApproachDetail {
  content: String!
  category: ApproachDetailCategory!
}

type Approach implements SearchResultItem {
  createdAt: String!
  task: Task!
  voteCount: Int!
  author: User!
  detailList: [ApproachDetail!]!
}

type User {
  id: ID!
  createdAt: String!
  username: String!
  name: String
  taskList: [Task!]!
}

#  root fields are made nullable so that if something went wrong in the resolver of this root field,
#  response can still have partial data for other root fields.

type Query {
  taskMainList: [Task!]
  search(term: String!): [SearchResultItem!]
  taskInfo(id: ID!): Task
  me: User
}
